!diff --git a/src/lib/net/commands.h b/src/lib/net/commands.h
index 6b2ebde..eae2a0e 100644
--- a/src/lib/net/commands.h
+++ b/src/lib/net/commands.h
@@ -2,9 +2,8 @@
 /* Copyright (c) 2005-2009, Stefan Eilemann <eile@equalizergraphics.com> 
  *
  * This library is free software; you can redistribute it and/or modify it under
- * the terms of the GNU Lesser General Public License as published by the Free
- * Software Foundation; either version 2.1 of the License, or (at your option)
- * any later version.
+ * the terms of the GNU Lesser General Public License version 2.1 as published
+ * by the Free Software Foundation.
  *  
  * This library is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
@@ -37,7 +36,6 @@ namespace net
         CMD_NODE_UNMAP_SESSION_REPLY,
         CMD_NODE_SESSION,
         CMD_NODE_CONNECT,
-        CMD_NODE_CONNECT_REPLY,
         CMD_NODE_DISCONNECT,
         CMD_NODE_GET_NODE_DATA,
         CMD_NODE_GET_NODE_DATA_REPLY,
diff --git a/src/lib/net/node.cpp b/src/lib/net/node.cpp
index 43e8b26..dc884f1 100644
--- a/src/lib/net/node.cpp
+++ b/src/lib/net/node.cpp
@@ -53,7 +53,7 @@ Node::Node()
         , _autoLaunch( false )
         , _id( true )
         , _state( STATE_STOPPED )
-        , _launchID( EQ_ID_INVALID )
+        , _connectID( EQ_ID_INVALID )
         , _programName( Global::getProgramName( ))
         , _workDir( Global::getWorkDir( ))
         , _hasSendToken( true )
@@ -84,8 +84,6 @@ Node::Node()
                      &_commandThreadQueue );
     registerCommand( CMD_NODE_CONNECT,
                      CommandFunc<Node>( this, &Node::_cmdConnect ), 0 );
-    registerCommand( CMD_NODE_CONNECT_REPLY,
-                     CommandFunc<Node>( this, &Node::_cmdConnectReply ), 0 );
     registerCommand( CMD_NODE_DISCONNECT,
                      CommandFunc<Node>( this, &Node::_cmdDisconnect ), 0 );
     registerCommand( CMD_NODE_GET_NODE_DATA,
@@ -266,7 +264,7 @@ bool Node::listen()
     }
 
     _state = STATE_LISTENING;
-
+    EQASSERT( !_connectionDescriptions.empty( ));
     EQVERB << typeid(*this).name() << " starting command and receiver thread "
            << endl;
     _receiverThread->start();
@@ -420,20 +418,20 @@ bool Node::connect( NodePtr node, ConnectionPtr connection )
     // send connect packet to peer
     NodeConnectPacket packet;
     packet.requestID = _requestHandler.registerRequest( node.get( ));
+    packet.connectID = node->_connectID;
+    node->_connectID = EQ_ID_INVALID;
     packet.nodeID    = _id;
     packet.nodeID.convertToNetwork();
     packet.type      = getType();
-    packet.launchID  = node->_launchID;
-    node->_launchID  = EQ_ID_INVALID;
     connection->send( packet, serialize( ));
 
-    bool connected = false;
-    _requestHandler.waitRequest( packet.requestID, connected );
-    if( !connected )
+    _requestHandler.waitRequest( packet.requestID );
+    if( !node->isConnected( ))
         return false;
 
     EQASSERT( node->_id != NodeID::ZERO );
     EQASSERTINFO( node->_id != _id, _id );
+    EQASSERT( node->isConnected( ));
     EQINFO << node << " connected to " << this << endl;
     return true;
 }
@@ -443,7 +441,10 @@ NodePtr Node::getNode( const NodeID& id ) const
     NodeIDHash< NodePtr >::const_iterator iter = _nodes.find( id );
     if( iter == _nodes.end( ))
         return 0;
-    return iter->second;
+
+    NodePtr node = iter->second;
+    EQASSERT( node->isConnected( ));
+    return node;
 }
 
 bool Node::disconnect( NodePtr node )
@@ -841,9 +842,8 @@ bool Node::_handleData()
     // This is one of the initial packets during the connection handshake, at
     // this point the remote node is not yet available.
     EQASSERTINFO( node.isValid() ||
-                  command->datatype == DATATYPE_EQNET_NODE &&
-                  ( command->command == CMD_NODE_CONNECT  || 
-                    command->command == CMD_NODE_CONNECT_REPLY),
+                  ( command->datatype == DATATYPE_EQNET_NODE &&
+                    command->command == CMD_NODE_CONNECT ),
                   command << " connection " << connection );
 
     _dispatchCommand( command );
@@ -1150,138 +1150,107 @@ CommandResult Node::_cmdUnmapSessionReply( Command& command)
 
 CommandResult Node::_cmdConnect( Command& command )
 {
-    EQASSERT( !command.getNode().isValid( ));
-    EQASSERT( inReceiverThread( ));
-
     const NodeConnectPacket* packet = command.getPacket<NodeConnectPacket>();
     ConnectionPtr        connection = _connectionSet.getConnection();
-
-    NodeID nodeID = packet->nodeID;
+    NodeID nodeID( packet->nodeID );
     nodeID.convertToHost();
-
     EQINFO << "handle connect " << packet << endl;
-    EQASSERT( nodeID != _id );
-    EQASSERT( _connectionNodes.find( connection ) == _connectionNodes.end( ));
 
-    if( _nodes.find( nodeID ) != _nodes.end( ))
-    {   // Node exists, probably simultaneous connect from peer
-        EQASSERT( packet->launchID == EQ_ID_INVALID );
-        EQINFO << "Already got node " << nodeID << ", refusing connect"
-               << endl;
+    const uint32_t connectID = packet->connectID;
 
-        // refuse connection
-        NodeConnectReplyPacket reply( packet );
-        connection->send( reply, serialize( ));
+    //  initial connect packet    and we are the master node
+    if( connectID == EQ_ID_INVALID && nodeID < _id )
+    {
+        EQASSERT( packet->requestID != EQ_ID_INVALID );
+        if( inReceiverThread( ))
+        {
+            EQINFO << "Connection request from slave node" << std::endl;
+            // handle in command thread, which will reopen another connection in
+            // a race-free manner
+            _removeConnection( connection );
+            _commandThreadQueue.push( command );
+            return COMMAND_HANDLED;
+        }
+        // else
+        EQASSERT( inCommandThread( ));
+     
+        NodePtr node = getNode( nodeID );
+        if( node.isValid( ))
+        {
+            // Some other request has connected the node already
+            NodeConnectPacket reply( packet );
+            node->send( reply, serialize( ));
+            return COMMAND_HANDLED;
+        }
+ 
+        node = createNode( packet->type );
+        string data = packet->nodeData;
+        if( !node->deserialize( data ))
+            EQWARN << "Error during node initialization" << endl;
 
-        // NOTE: There used to be no close() here. If deadlocks occur, it is
-        // likely that the reply packet above can't be received by the peer
-        // because the connection is closed by us. In that case, do not close
-        // the connection here. Take care to cancel the pending IO for the next
-        // packet size, and to delete the memory for the packet size.
-        _removeConnection( connection );
+        node->_connectID = packet->requestID;
+        connect( node );
         return COMMAND_HANDLED;
     }
 
-    // create and add connected node
-    NodePtr remoteNode;
-    if( packet->launchID != EQ_ID_INVALID )
-    {
-        void* ptr = _requestHandler.getRequestData( packet->launchID );
-        EQASSERT( dynamic_cast< Node* >( (Dispatcher*)ptr ));
-        remoteNode = static_cast< Node* >( ptr );
-        remoteNode->_connectionDescriptions.clear(); //use actual data from peer
-    }
-    else
-        remoteNode = createNode( packet->type );
-
-    string data = packet->nodeData;
-    if( !remoteNode->deserialize( data ))
-        EQWARN << "Error during node initialization" << endl;
-    EQASSERT( data.empty( ));
-    EQASSERTINFO( remoteNode->_id == nodeID,
-                  remoteNode->_id << "!=" << nodeID );
-
-    remoteNode->_connection = connection;
-    remoteNode->_state      = STATE_CONNECTED;
-    
-    _connectionNodes[ connection ] = remoteNode;
-    _nodes[ remoteNode->_id ]      = remoteNode;
-    EQVERB << "Added node " << nodeID << " using " << connection << std::endl;
-
-    // send our information as reply
-    NodeConnectReplyPacket reply( packet );
-    reply.nodeID    = _id;
-    reply.nodeID.convertToNetwork();
-
-    reply.type      = getType();
-
-    connection->send( reply, serialize( ));
-
-    if( packet->launchID != EQ_ID_INVALID )
-        _requestHandler.serveRequest( packet->launchID );
-    
-    return COMMAND_HANDLED;
-}
-
-CommandResult Node::_cmdConnectReply( Command& command )
-{
-    EQASSERT( !command.getNode( ));
     EQASSERT( inReceiverThread( ));
+    EQASSERT( nodeID != _id );
 
-    const NodeConnectReplyPacket* packet = 
-        command.getPacket<NodeConnectReplyPacket>();
-    ConnectionPtr connection = _connectionSet.getConnection();
-
-    NodeID nodeID = packet->nodeID;
-    nodeID.convertToHost();
-
-    EQINFO << "handle connect reply " << packet << endl;
-    EQASSERT( _connectionNodes.find( connection ) == _connectionNodes.end( ));
-
-    if( nodeID == NodeID::ZERO ||               // connection refused
-        _nodes.find( nodeID ) != _nodes.end( )) // Node exists, probably
-                                                // simultaneous connect
+    const uint32_t requestID = packet->requestID;
+    NodePtr node = getNode( nodeID );
+    if( node.isValid( ))
     {
-        EQINFO << "ignoring connect reply, node already connected" << endl;
-        _removeConnection( connection );
-        
-        if( packet->requestID != EQ_ID_INVALID )
-            _requestHandler.serveRequest( packet->requestID, false );
+        EQASSERT( !command.getNode() || command.getNode() == node );
+        if( node->_connection != connection )
+            _removeConnection( connection );
+    }
+    else if( packet->type != TYPE_EQNET_INVALID )
+    {
+        if( connectID != EQ_ID_INVALID )
+        {
+            void* ptr = _requestHandler.getRequestData( packet->connectID );
+            EQASSERT( dynamic_cast< Node* >( (Dispatcher*)ptr ));
+            node = static_cast< Node* >( ptr );
+            node->_connectionDescriptions.clear(); // use actual data from peer
+        }
+        else
+            node = createNode( packet->type );
         
-        return COMMAND_HANDLED;
+        EQASSERT( node.isValid( ));
+
+        string data = packet->nodeData;
+        if( !node->deserialize( data ))
+            EQWARN << "Error during node initialization" << endl;
+        EQASSERT( !command.getNode( ));
+        EQASSERT( data.empty( ));
+        EQASSERTINFO( node->_id == nodeID, node->_id << "!=" << nodeID );
+        EQASSERT( _connectionNodes.find( connection ) == 
+                  _connectionNodes.end( ));
+
+        node->_connection = connection;
+        node->_state      = STATE_CONNECTED;
+        _connectionNodes[ connection ] = node;
+        _nodes[ nodeID ]  = node;
+        EQINFO << "Added node " << nodeID << " using " << connection
+               << std::endl;
     }
 
-    // create and add node
-    NodePtr remoteNode;
-    if( packet->requestID != EQ_ID_INVALID )
+    if( requestID != EQ_ID_INVALID )
     {
-        void* ptr = _requestHandler.getRequestData( packet->requestID );
-        EQASSERT( dynamic_cast< Node* >( (Dispatcher*)ptr ));
-        remoteNode = static_cast< Node* >( ptr );
-        remoteNode->_connectionDescriptions.clear(); //get actual data from peer
+        NodeConnectPacket reply( packet );
+        reply.type      = getType();
+        reply.nodeID    = _id;
+        reply.nodeID.convertToNetwork();
+
+        if( node.isValid( ))
+            node->send( reply, serialize( ));
+        else
+            connection->send( reply, serialize( ));
     }
 
-    if( !remoteNode )
-        remoteNode = createNode( packet->type );
-
-    EQASSERT( remoteNode->getType() == packet->type );
-    EQASSERT( remoteNode->getState() == STATE_STOPPED );
-
-    string data = packet->nodeData;
-    if( !remoteNode->deserialize( data ))
-        EQWARN << "Error during node initialization" << endl;
-    EQASSERT( data.empty( ));
-    EQASSERT( remoteNode->_id == nodeID );
-
-    remoteNode->_connection = connection;
-    remoteNode->_state      = STATE_CONNECTED;
+    if( connectID != EQ_ID_INVALID )
+        _requestHandler.serveRequest( packet->connectID );
     
-    _connectionNodes[ connection ] = remoteNode;
-    _nodes[ remoteNode->_id ]      = remoteNode;
-    EQVERB << "Added node " << nodeID << " using " << connection << std::endl;
-
-    if( packet->requestID != EQ_ID_INVALID )
-        _requestHandler.serveRequest( packet->requestID, true );
     return COMMAND_HANDLED;
 }
 
@@ -1359,12 +1328,10 @@ CommandResult Node::_cmdGetNodeDataReply( Command& command )
     NodeID nodeID = packet->nodeID;
     nodeID.convertToHost();
 
-    if( _nodes.find( nodeID ) != _nodes.end( ))
+    NodePtr node = getNode( nodeID );
+    if( node.isValid( ))
     {   
         // Requested node connected to us in the meantime
-        NodePtr node = _nodes[ nodeID ];
-        EQASSERT( node->isConnected( ));
-
         node.ref();
         _requestHandler.serveRequest( requestID, node.get( ));
         return COMMAND_HANDLED;
@@ -1376,7 +1343,7 @@ CommandResult Node::_cmdGetNodeDataReply( Command& command )
         return COMMAND_HANDLED;
     }
         
-    NodePtr node = createNode( packet->type );
+    node = createNode( packet->type );
     EQASSERT( node.isValid( ));
 
     string data = packet->nodeData;
@@ -1490,23 +1457,23 @@ bool Node::initConnect( NodePtr node )
 
 bool Node::syncConnect( NodePtr node )
 {
-    if( node->_launchID == EQ_ID_INVALID )
+    if( node->_connectID == EQ_ID_INVALID )
         return ( node->getState() == STATE_CONNECTED );
 
     void*          ret;
     const float    time    = -( node->_launchTimeout.getTimef( )); 
     const uint32_t timeout = static_cast< uint32_t >((time > 0) ? time : 0);
 
-    if( _requestHandler.waitRequest( node->_launchID, ret, timeout ))
+    if( _requestHandler.waitRequest( node->_connectID, ret, timeout ))
     {
         EQASSERT( node->getState() == STATE_CONNECTED );
-        node->_launchID = EQ_ID_INVALID;
+        node->_connectID = EQ_ID_INVALID;
         return true;
     }
 
     node->_state = STATE_STOPPED;
-    _requestHandler.unregisterRequest( node->_launchID );
-    node->_launchID = EQ_ID_INVALID;
+    _requestHandler.unregisterRequest( node->_connectID );
+    node->_connectID = EQ_ID_INVALID;
     return false;
 }
 
@@ -1540,24 +1507,13 @@ NodePtr Node::connect( const NodeID& nodeID )
 NodePtr Node::_connect( const NodeID& nodeID, NodePtr server )
 {
     EQASSERT( nodeID != NodeID::ZERO );
+    EQASSERT( !inReceiverThread( ));
 
-    NodeIDHash< NodePtr >::const_iterator iter = _nodes.find( nodeID );
-    if( iter != _nodes.end( ))
-        return iter->second;
-
-    // Make sure that only one connection request based on the node identifier
-    // is pending at a given time. Otherwise a node with the same id might be
-    // instantiated twice in _cmdGetNodeDataReply(). The alternative to this
-    // mutex is to register connecting nodes with this local node, and handle
-    // all cases correctly, which is far more complex. Node connections only
-    // happen a lot during initialization, and are therefore not time-critical.
-    ScopedMutex< Lock > mutex( _connectMutex );
-    EQINFO << "Connecting node " << nodeID << endl;
+    NodePtr node = getNode( nodeID );
+    if( node.isValid( ))
+        return node;
 
-    iter = _nodes.find( nodeID );
-    if( iter != _nodes.end( ))
-        return iter->second;
- 
+    EQINFO << "Connecting node " << nodeID << endl;
     EQASSERT( _id != nodeID );
     NodeGetNodeDataPacket packet;
     packet.requestID = _requestHandler.registerRequest();
@@ -1576,27 +1532,19 @@ NodePtr Node::_connect( const NodeID& nodeID, NodePtr server )
     }
 
     EQASSERT( dynamic_cast< Node* >( (Dispatcher*)result ));
-    NodePtr node = static_cast< Node* >( result );
+    node = static_cast< Node* >( result );
     node.unref(); // ref'd before serveRequest()
     
     if( node->isConnected( ))
         return node;
 
-    if( !connect( node ))
-    {
-        // connect failed - maybe simultaneous connect from peer?
-        iter = _nodes.find( nodeID );
-        if( iter != _nodes.end( ))
-        {
-            node = iter->second;
-            EQASSERT( node->isConnected( ));
-            return node;
-        }
-        
-        EQWARN << "Node connection failed" << endl;
-        return 0;
-    }
+    if( connect( node ))
+        return node;
 
+    // connect failed - maybe simultaneous connect?
+    node = getNode( nodeID );
+    if( !node )
+        EQWARN << "Node connection failed" << endl;
     return node;
 }
 
@@ -1605,7 +1553,7 @@ bool Node::_launch( NodePtr node,
 {
     EQASSERT( node->getState() == STATE_STOPPED );
 
-    node->_launchID = _requestHandler.registerRequest( node.get() );
+    node->_connectID = _requestHandler.registerRequest( node.get() );
     node->_launchTimeout.setAlarm( description->launchTimeout );
 
     const string launchCommand = _createLaunchCommand( node, description );
@@ -1614,8 +1562,8 @@ bool Node::_launch( NodePtr node,
     {
         EQWARN << "Could not launch node using '" << launchCommand << "'" 
                << endl;
-        _requestHandler.unregisterRequest( node->_launchID );
-        node->_launchID = EQ_ID_INVALID;
+        _requestHandler.unregisterRequest( node->_connectID );
+        node->_connectID = EQ_ID_INVALID;
         return false;
     }
     
@@ -1728,7 +1676,7 @@ string Node::_createRemoteCommand( NodePtr node, const char quote )
 
     stringStream
         << quote << program << quote << " -- --eq-client " << quote
-        << remoteData << node->_launchID << SEPARATOR << node->_workDir 
+        << remoteData << node->_connectID << SEPARATOR << node->_workDir 
         << SEPARATOR << node->_id << SEPARATOR << getType() << SEPARATOR
         << ownData << quote;
 
@@ -1748,7 +1696,7 @@ bool Node::runClient( const std::string& clientArgs )
 
     const string   request     = clientArgs.substr( 0, nextPos );
     string         description = clientArgs.substr( nextPos + 1 );
-    const uint32_t launchID    = strtoul( request.c_str(), 0, 10 );
+    const uint32_t connectID   = strtoul( request.c_str(), 0, 10 );
 
     nextPos = description.find( SEPARATOR );
     if( nextPos == string::npos )
@@ -1766,7 +1714,7 @@ bool Node::runClient( const std::string& clientArgs )
         EQWARN << "Can't change working directory to " << workDir << ": "
                << strerror( errno ) << endl;
     
-    EQINFO << "Launching node with launch ID=" << launchID << ", cwd="
+    EQINFO << "Launching node with launch ID=" << connectID << ", cwd="
            << workDir << endl;
 
     nextPos = description.find( SEPARATOR );
@@ -1798,7 +1746,7 @@ bool Node::runClient( const std::string& clientArgs )
     }
     
     node->setAutoLaunch( false );
-    node->_launchID = launchID;
+    node->_connectID = connectID;
 
     if( !node->deserialize( description ))
         EQWARN << "Can't parse node data" << endl;
diff --git a/src/lib/net/node.h b/src/lib/net/node.h
index 2b8b346..4954a5c 100644
--- a/src/lib/net/node.h
+++ b/src/lib/net/node.h
@@ -538,11 +538,8 @@ namespace net
         /** The receiver->command command queue. */
         CommandQueue _commandThreadQueue;
 
-        /** Needed for thread-safety during nodeID-based connect() */
-        base::Lock _connectMutex;
-
         /** The request id for the async launch operation. */
-        uint32_t _launchID;
+        uint32_t _connectID;
 
         /** The remaining timeout for the launch operation. */
         base::Clock _launchTimeout;
@@ -670,7 +667,6 @@ namespace net
         CommandResult _cmdUnmapSession( Command& command );
         CommandResult _cmdUnmapSessionReply( Command& command );
         CommandResult _cmdConnect( Command& command );
-        CommandResult _cmdConnectReply( Command& command );
         CommandResult _cmdDisconnect( Command& command );
         CommandResult _cmdGetNodeData( Command& command );
         CommandResult _cmdGetNodeDataReply( Command& command );
diff --git a/src/lib/net/packets.h b/src/lib/net/packets.h
index b5cf580..24d7730 100644
--- a/src/lib/net/packets.h
+++ b/src/lib/net/packets.h
@@ -2,9 +2,8 @@
 /* Copyright (c) 2005-2009, Stefan Eilemann <eile@equalizergraphics.com> 
  *
  * This library is free software; you can redistribute it and/or modify it under
- * the terms of the GNU Lesser General Public License as published by the Free
- * Software Foundation; either version 2.1 of the License, or (at your option)
- * any later version.
+ * the terms of the GNU Lesser General Public License version 2.1 as published
+ * by the Free Software Foundation.
  *  
  * This library is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
@@ -21,6 +20,7 @@
 
 #include <eq/net/commands.h> // used for CMD_ enums
 #include <eq/net/nodeID.h>   // member
+#include <eq/net/nodeType.h>   // member
 
 #include <eq/base/idPool.h> // for EQ_ID_*
 
@@ -159,33 +159,27 @@ namespace net
     struct NodeConnectPacket : public NodePacket
     {
         NodeConnectPacket() 
+                : requestID( EQ_ID_INVALID )
+                , connectID( EQ_ID_INVALID )
+                , type( TYPE_EQNET_INVALID )
             {
                 command     = CMD_NODE_CONNECT;
                 size        = sizeof( NodeConnectPacket ); 
-                requestID   = EQ_ID_INVALID;
-                launchID    = EQ_ID_INVALID;
                 nodeData[0] = '\0';
             }
-
-        NodeID   nodeID;
-        uint32_t requestID;
-        uint32_t type;
-        uint32_t launchID;
-        EQ_ALIGN8( char nodeData[8] );
-    };
-
-    struct NodeConnectReplyPacket : public NodePacket
-    {
-        NodeConnectReplyPacket( const NodeConnectPacket* request ) 
+        NodeConnectPacket( const NodeConnectPacket* request ) 
+                : requestID( EQ_ID_INVALID )
+                , connectID( request->requestID )
+                , type( TYPE_EQNET_INVALID )
             {
-                command     = CMD_NODE_CONNECT_REPLY;
-                size        = sizeof( NodeConnectReplyPacket ); 
-                requestID   = request->requestID;
+                command     = CMD_NODE_CONNECT;
+                size        = sizeof( NodeConnectPacket ); 
                 nodeData[0] = '\0';
             }
 
         NodeID   nodeID;
         uint32_t requestID;
+        uint32_t connectID;
         uint32_t type;
         EQ_ALIGN8( char nodeData[8] );
     };
@@ -644,20 +638,13 @@ namespace net
     inline std::ostream& operator << ( std::ostream& os, 
                                        const NodeConnectPacket* packet )
     {
-        os << (NodePacket*)packet << " req " << packet->requestID << " type "
-           << packet->type << " launchID " << packet->launchID << " data "
+        os << (NodePacket*)packet << " req " << packet->requestID << " con "
+           << packet->connectID << " type " << packet->type << " data "
            << packet->nodeData;
         return os;
     }
     inline std::ostream& operator << ( std::ostream& os, 
-                                       const NodeConnectReplyPacket* packet )
-    {
-        os << (NodePacket*)packet << " req " << packet->requestID << " type "
-           << packet->type << " data " << packet->nodeData;
-        return os;
-    }
-    inline std::ostream& operator << ( std::ostream& os, 
-                              const NodeGetNodeDataPacket* packet )
+                                       const NodeGetNodeDataPacket* packet )
     {
         os << (NodePacket*)packet << " req " << packet->requestID << " nodeID " 
            << packet->nodeID;

Index: lib/net/cc.h
===================================================================
--- lib/net/cc.h	(revision 0)
+++ lib/net/cc.h	(revision 0)
@@ -0,0 +1,101 @@
+#include "udt/udt.h"
+#include "udt/ccc.h"
+
+class CTCP: public CCC
+{
+public:
+   void init() 
+   {
+      m_bSlowStart = true;
+      m_issthresh = 83333;
+
+      m_dPktSndPeriod = 0.0;
+      m_dCWndSize = 2.0;
+
+      setACKInterval(2);
+      setRTO(1000000);
+   }
+
+   virtual void onACK(const int& ack)
+   {
+      if (ack == m_iLastACK)
+      {
+         if (3 == ++ m_iDupACKCount)
+            DupACKAction();
+         else if (m_iDupACKCount > 3)
+            m_dCWndSize += 1.0;
+         else
+            ACKAction();
+      }
+      else
+      {
+         if (m_iDupACKCount >= 3)
+            m_dCWndSize = m_issthresh;
+
+         m_iLastACK = ack;
+         m_iDupACKCount = 1;
+
+         ACKAction();
+      }
+   }
+
+   virtual void onTimeout()
+   {
+      m_issthresh = getPerfInfo()->pktFlightSize / 2;
+      if (m_issthresh < 2)
+         m_issthresh = 2;
+
+      m_bSlowStart = true;
+      m_dCWndSize = 2.0;
+   }
+
+protected:
+   virtual void ACKAction()
+   {
+      if (m_bSlowStart)
+      {
+         m_dCWndSize += 1.0;
+
+         if (m_dCWndSize >= m_issthresh)
+            m_bSlowStart = false;
+      }
+      else
+         m_dCWndSize += 1.0/m_dCWndSize;
+   }
+
+   virtual void DupACKAction()
+   {
+      m_bSlowStart = false;
+
+      m_issthresh = getPerfInfo()->pktFlightSize / 2;
+      if (m_issthresh < 2)
+         m_issthresh = 2;
+
+      m_dCWndSize = m_issthresh + 3;
+   }
+
+protected:
+   int m_issthresh;
+   bool m_bSlowStart;
+
+   int m_iDupACKCount;
+   int m_iLastACK;
+};
+
+
+class CUDPBlast: public CCC
+{
+
+public:
+   CUDPBlast()
+   {
+      m_dPktSndPeriod = 1000000; 
+      m_dCWndSize = 83333.0; 
+   }
+
+public:
+   void setRate(double mbps)
+   {
+      m_dPktSndPeriod = (m_iMSS * 8.0) / mbps;
+   }
+};

Property changes on: lib\net\cc.h
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lib/net/udtConnection.cpp
===================================================================
--- lib/net/udtConnection.cpp	(revision 0)
+++ lib/net/udtConnection.cpp	(revision 0)
@@ -0,0 +1,493 @@
+
+/* Copyright (c) 2005-2010, Stefan Eilemann <eile@equalizergraphics.com> 
+ *
+ * This library is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 2.1 as published
+ * by the Free Software Foundation.
+ *  
+ * This library is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
+ * details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this library; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+//#include "udt/udt.h"
+#include "UDTConnection.h"
+
+#include "connectionDescription.h"
+
+#include <eq/base/base.h>
+#include <eq/base/log.h>
+#include <eq/base/sleep.h>
+
+#include <limits>
+#include <sstream>
+#include <string.h>
+#include <sys/types.h>
+#  include <Mswsock.h>
+   #include <winsock2.h>
+   #include <ws2tcpip.h>
+   #include <wspiapi.h>
+#  define EQ_RECV_TIMEOUT 250 /*ms*/
+#  define EQ_HARD_TIMEOUT true
+
+// use this function to initialize the UDT library
+int start = UDT::startup();
+
+//#define EQ_CONTROLCONGETION true
+
+namespace eq
+{
+namespace net
+{
+UDTConnection::UDTConnection( )
+        : _thread( 0 )
+        , cchandle ( 0 )
+{
+    _description->type = CONNECTIONTYPE_UDT;
+    _description->bandwidth = 102400;
+
+    EQVERB << "New UDTConnection @" << (void*)this << std::endl;
+}
+
+UDTConnection::~UDTConnection()
+{
+}
+
+//----------------------------------------------------------------------
+// connect
+//----------------------------------------------------------------------
+bool UDTConnection::connect()
+{
+    EQASSERT( _description->type == CONNECTIONTYPE_UDT );
+    if( _state != STATE_CLOSED )
+        return false;
+
+    if( _description->port == 0 )
+        return false;
+
+    _state = STATE_CONNECTING;
+    _fireStateChanged();
+
+    if( _description->getHostname().empty( ))
+        _description->setHostname( "localhost" );
+
+    sockaddr_in address;
+    if( !_parseAddress( address ))
+    {
+        EQWARN << "Can't parse connection parameters" << std::endl;
+        return false;
+    }
+
+    if( !_createSocket( ))
+        return false;
+
+    if( address.sin_addr.s_addr == 0 )
+    {
+        EQWARN << "Refuse to connect to 0.0.0.0" << std::endl;
+        close();
+        return false;
+    }
+
+    const bool connected = ( UDT::connect( _readFD, (sockaddr*)&address, 
+                                           sizeof( address )) == 0);
+
+    if( !connected )
+    {
+        EQWARN << "Could not connect to '" << _description->getHostname() << ":"
+               << _description->port << "': " << UDT::getlasterror().getErrorMessage() << std::endl;
+        close();
+        return false;
+    }
+
+#ifdef EQ_CONTROLCONGETION
+    UDT::setsockopt( _readFD, 0, UDT_CC, new CCCFactory<CTCP>, 
+                     sizeof(CCCFactory<CTCP>));
+    cchandle = 0;
+    int temp;
+    UDT::getsockopt(_readFD, 0, UDT_CC, &cchandle, &temp);
+    if (NULL != cchandle)
+       cchandle->init( );
+#endif
+
+    _initAIORead();
+    _state = STATE_CONNECTED;
+    _fireStateChanged();
+
+    _thread = new Thread( this );
+    _thread->start( );
+    EQINFO << "Connected " << _description->toString() << std::endl;
+    return true;
+}
+
+void UDTConnection::close()
+{
+    if( _state == STATE_CLOSED )
+        return;
+
+    if( isListening( ))
+        _exitAIOAccept();
+    else if( isConnected( ))
+        _exitAIORead();
+
+    _state = STATE_CLOSED;
+    EQASSERT( _readFD > 0 ); 
+
+    const bool closed = ( UDT::close(_readFD) == 0 );
+    if( !closed )
+        EQWARN << "Could not close socket: " << base::sysError << std::endl;
+
+    _readFD = 0;
+    _writeFD = 0;
+    _fireStateChanged();
+}
+
+//----------------------------------------------------------------------
+// Async IO handles
+//----------------------------------------------------------------------
+void UDTConnection::_initAIORead()
+{
+	    // Start accept
+    EQASSERT ( !_thread )
+    _thread = new Thread( this );
+    _thread->start( );
+}
+
+void UDTConnection::_initAIOAccept()
+{
+    _initAIORead();
+}
+
+void UDTConnection::_exitAIOAccept()
+{    
+    _exitAIORead();
+}
+void UDTConnection::_exitAIORead()
+{
+}
+bool UDTConnection::Thread::init() 
+{ 
+    tv.tv_sec = INFINITE;
+    tv.tv_usec = 0;
+    UD_ZERO(&readfds);
+    UD_SET(_connection->_readFD, &readfds);
+    _hEvent = CreateEvent( 0, TRUE, FALSE, 0 );
+    _hEventSynchro = CreateEvent( 0, FALSE, FALSE, 0 );
+    return true;
+}
+void UDTConnection::Thread::run()
+{
+    while( true )
+    {
+        int res = UDT::select(0, &readfds, 0, 0, &tv);
+               
+        if (( !_connection ) || 
+            ( _connection->_state == STATE_CLOSED ))
+            return;
+        
+        if (( res != -1 ) && 
+            ( UD_ISSET( _connection->_readFD, &readfds )))
+        {        
+            SetEvent( _hEvent );
+            WaitForSingleObject( _hEventSynchro, INFINITE );
+        }
+        else
+        {
+			EQWARN << "Select Event invalid" << std::endl;
+            return;
+        }
+    }
+}
+/*
+
+}
+*/
+//----------------------------------------------------------------------
+// accept
+//----------------------------------------------------------------------
+void UDTConnection::acceptNB()
+{
+    EQASSERT( _state == STATE_LISTENING );
+}
+    
+ConnectionPtr UDTConnection::acceptSync()
+{
+    CHECK_THREAD( _recvThread );
+    if( _state != STATE_LISTENING )
+        return 0;
+
+    UDTConnection* newConnection = new UDTConnection( );
+    ConnectionPtr connection( newConnection ); // to keep ref-counting correct
+    EventConnectionPtr _event;
+    sockaddr_in remote;
+    int addrlen = sizeof(remote);
+    Socket overlappedSocket = UDT::accept( _readFD, 
+                                           (sockaddr*)&remote, &addrlen);
+
+#ifdef EQ_CONTROLCONGETION
+    UDT::setsockopt( overlappedSocket, 0, UDT_CC, new CCCFactory<CTCP>, 
+                     sizeof(CCCFactory<CTCP>));
+    cchandle = 0;
+    int temp;
+    UDT::getsockopt( overlappedSocket, 0, UDT_CC, &cchandle, &temp);
+    if (NULL != cchandle)
+       cchandle->init( );
+#endif
+
+    newConnection->_readFD  = overlappedSocket;
+    newConnection->_writeFD = overlappedSocket;
+    newConnection->_initAIORead();
+
+    newConnection->_state                  = STATE_CONNECTED;
+    newConnection->_description->bandwidth = _description->bandwidth;
+
+    newConnection->_description->port      = ntohs( remote.sin_port );
+    newConnection->_description->setHostname( inet_ntoa( remote.sin_addr ));
+
+    EQINFO << "accepted connection from " << inet_ntoa( remote.sin_addr ) 
+           << ":" << ntohs( remote.sin_port ) << std::endl;
+
+    ResetEvent( _thread->_hEvent );
+    SetEvent( _thread->_hEventSynchro );
+
+    return connection;
+}
+
+//----------------------------------------------------------------------
+// read
+//----------------------------------------------------------------------
+void UDTConnection::readNB( void* buffer, const uint64_t bytes )
+{
+    if( _state == STATE_CLOSED )
+        return;
+
+	sizeReceive = 0;
+    if( !hasData( 0 ))
+    {
+        ResetEvent( _thread->_hEvent );
+        SetEvent( _thread->_hEventSynchro );
+		return;
+    }
+    char* bufchar = reinterpret_cast< char* >( buffer );
+	if ( -1 == ( sizeReceive = 
+		  UDT::recv( _readFD, bufchar, bytes, 0)))
+	{
+		EQWARN << "recv:" << UDT::getlasterror().getErrorMessage() << std::endl;
+        close();
+		return;
+	}
+	SetEvent( _thread->_hEvent );
+}
+
+int64_t UDTConnection::readSync( void* buffer, const uint64_t bytes )
+{
+    //EQWARN << "start reads:" << bytes << std::endl;
+    CHECK_THREAD( _recvThread );
+    base::ScopedMutex<> mutex( _mutexEvent );
+    if( _readFD == INVALID_SOCKET )
+    {
+        EQERROR << "Invalid read handle" << std::endl;
+        return -1;
+    }
+
+	if ( sizeReceive > 0 )
+		return sizeReceive;
+
+    int64_t rs = 0;
+    int64_t rsize = 0;
+    char* bufchar = reinterpret_cast< char* >( buffer );
+    while (rsize < bytes)
+    {    
+		hasData( INFINITE );
+        int64_t read = EQ_MIN( bytes - rsize, 10000000);
+        if ( -1 == (rs = UDT::recv( _readFD, bufchar + rsize , read, 0)))
+        {
+            EQWARN << "recv:" << UDT::getlasterror().getErrorMessage() << std::endl;
+            close();
+			return -1;
+        }
+        rsize += rs;
+
+        if (rsize < bytes)
+            hasData( 0 );
+    }
+
+    return rsize;
+}
+
+int64_t UDTConnection::write( const void* buffer, const uint64_t bytes)
+{
+    if( _state != STATE_CONNECTED || _writeFD == INVALID_SOCKET )
+        return -1;
+
+    int64_t ss = 0;
+    char* bufchar = const_cast<char*>( static_cast< const char* >( buffer )) ;
+    int64_t read = EQ_MIN( bytes, 10000000 );
+    if (0 == (ss = UDT::send( _writeFD, bufchar, read, 0)))
+    {
+        EQWARN << "send:" << UDT::getlasterror().getErrorMessage() << std::endl;
+        close();
+        return 0;
+    }
+    return ss;
+
+}
+
+bool UDTConnection::_createSocket()
+{
+    Socket fd = UDT::socket( AF_INET, SOCK_STREAM, 0 );
+
+    if( fd == INVALID_SOCKET )
+    {
+        EQERROR << "Could not create socket: " << base::sysError << std::endl;
+        return false;
+    }
+
+    _tuneSocket( fd );
+
+    _readFD  = fd;
+    _writeFD = fd; // UDT sockets are bidirectional
+    return true;
+}
+
+void UDTConnection::_tuneSocket( const Socket fd )
+{
+    const bool off         = false;
+    const bool on          = true;
+    UDT::setsockopt( fd, 0, UDT_RCVSYN, 
+                reinterpret_cast<const char*>( &off), sizeof( on ));
+	UDT::setsockopt(fd, 0, UDT_MSS, new int(1052), sizeof(int));
+    UDT::setsockopt(fd, 0, UDT_SNDBUF, new int(10000000), sizeof(int));
+    UDT::setsockopt(fd, 0, UDP_SNDBUF, new int(10000000), sizeof(int));
+    UDT::setsockopt(fd, 0, UDT_RCVBUF, new int(10000000), sizeof(int));
+    UDT::setsockopt(fd, 0, UDP_RCVBUF, new int(10000000), sizeof(int));
+}
+
+bool UDTConnection::_parseAddress( sockaddr_in& address )
+{
+    address.sin_family      = AF_INET;
+    address.sin_addr.s_addr = htonl( INADDR_ANY );
+    address.sin_port        = htons( _description->port );
+    memset( &(address.sin_zero), 0, 8 ); // zero the rest
+
+    const std::string& hostname = _description->getHostname();
+    if( !hostname.empty( ))
+    {
+        hostent *hptr = gethostbyname( hostname.c_str( ));
+        if( hptr )
+            memcpy( &address.sin_addr.s_addr, hptr->h_addr, hptr->h_length );
+        else
+        {
+            EQWARN << "Can't resolve host " << hostname << std::endl;
+            return false;
+        }
+    }
+
+    EQVERB << "Address " << inet_ntoa( address.sin_addr ) << ":" 
+           << ntohs( address.sin_port ) << std::endl;
+    return true;
+}
+
+//----------------------------------------------------------------------
+// listen
+//----------------------------------------------------------------------
+bool UDTConnection::listen()
+{
+    EQASSERT( _description->type == CONNECTIONTYPE_UDT );
+
+    if( _state != STATE_CLOSED )
+        return false;
+
+    _state = STATE_CONNECTING;
+    _fireStateChanged();
+
+    sockaddr_in address;
+    const size_t size = sizeof( sockaddr_in ); 
+
+    if( !_parseAddress( address ))
+    {
+        EQWARN << "Can't parse connection parameters" << std::endl;
+        return false;
+    }
+
+    if( !_createSocket())
+        return false;
+
+    int result = UDT::bind(_readFD, (sockaddr *)&address, size );
+    const bool bound = result == 0 ;
+    if( !bound )
+    {
+        EQWARN << "Could not bind socket " << _readFD << ": " 
+               << UDT::getlasterror().getErrorMessage() << " to " 
+               << inet_ntoa( address.sin_addr )
+               << ":" << ntohs( address.sin_port ) << " AF "
+               << (int)address.sin_family << std::endl;
+
+        close();
+        return false;
+    }
+    else if( address.sin_port == 0 )
+        EQINFO << "Bound to port " << _getPort() << std::endl;
+
+    const bool listening = (UDT::listen( _readFD, 10 ) == 0);
+        
+    if( !listening )
+    {
+        EQWARN << "Could not listen on socket: "<< base::sysError << std::endl;
+        close();
+        return false;
+    }
+    
+    // get socket parameters
+    socklen_t used = size;
+    getsockname( _readFD, (struct sockaddr *)&address, &used ); 
+
+    _description->port = ntohs( address.sin_port );
+
+    const std::string& hostname = _description->getHostname();
+    if( hostname.empty( ))
+    {
+        if( address.sin_addr.s_addr == INADDR_ANY )
+        {
+            char cHostname[256];
+            gethostname( cHostname, 256 );
+            _description->setHostname( cHostname );
+        }
+        else
+            _description->setHostname( inet_ntoa( address.sin_addr ));
+    }
+    
+    _initAIOAccept();
+    _state = STATE_LISTENING;
+    _fireStateChanged();
+
+    EQINFO << "Listening on " << _description->getHostname() << "["
+           << inet_ntoa( address.sin_addr ) << "]:" << _description->port
+           << " (" << _description->toString() << ")" << std::endl;
+    
+    return true;
+}
+uint16_t UDTConnection::_getPort() const
+{
+    sockaddr_in address;
+    socklen_t used = sizeof( address );
+    getsockname( _readFD, (struct sockaddr *) &address, &used ); 
+    return ntohs(address.sin_port);
+}
+
+bool UDTConnection::hasData( int timeout ) const
+{
+    timeval tv;
+    UDT::UDSET readfds;
+    tv.tv_sec = timeout;
+    tv.tv_usec = 0;
+    UD_ZERO(&readfds);
+    UD_SET(_readFD, &readfds);
+    const int res = UDT::select(0, &readfds, 0, 0, &tv);        
+    return  (( res != -1 ) && (UD_ISSET( _readFD, &readfds )));
+}
+}
+}

Property changes on: lib\net\udtConnection.cpp
___________________________________________________________________
Added: svn:eol-style
   + native

Index: lib/net/udtConnection.h
===================================================================
--- lib/net/udtConnection.h	(revision 0)
+++ lib/net/udtConnection.h	(revision 0)
@@ -0,0 +1,106 @@
+
+/* Copyright (c) 2005-2010, Stefan Eilemann <eile@equalizergraphics.com> 
+ *
+ * This library is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU Lesser General Public License version 2.1 as published
+ * by the Free Software Foundation.
+ *  
+ * This library is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
+ * details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this library; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef EQNET_UDTConnection_H
+#define EQNET_UDTConnection_H
+
+#include <eq/net/connectionType.h> // enum
+#include <eq/base/base.h>
+#include <eq/base/buffer.h> // member
+#include <eq/base/lock.h> // member
+#include <eq/net/connection.h>
+#include <udt/udt.h>
+#include "cc.h"
+#include "eventConnection.h" // member
+
+namespace eq
+{
+namespace net
+{
+    /** A socket connection (TCPIP or SDP). */
+    class UDTConnection : public Connection
+    {
+    public:
+        /** 
+         * Create a new socket-based connection
+         */
+        UDTConnection( );
+
+        virtual bool connect();
+        virtual bool listen();
+        virtual void acceptNB();
+        virtual ConnectionPtr acceptSync();
+        virtual void close();
+
+        /** @sa Connection::getNotifier */
+        virtual Notifier getNotifier() const { return _thread->_hEvent; }
+        typedef base::RefPtr< EventConnection > EventConnectionPtr;
+
+        bool hasData( int timeout ) const;
+      
+    protected:
+        virtual ~UDTConnection();
+
+        virtual void readNB( void* buffer, const uint64_t bytes );
+        virtual int64_t readSync( void* buffer, const uint64_t bytes );
+        virtual int64_t write( const void* buffer, const uint64_t bytes );
+
+        typedef UDTSOCKET Socket;
+    private:
+        void _initAIOAccept();
+        void _exitAIOAccept();
+        void _initAIORead();
+        void _exitAIORead();
+        bool _createSocket();
+        void _tuneSocket( const Socket fd );
+        bool _parseAddress( sockaddr_in& address );
+        uint16_t _getPort() const;
+        CTCP* cchandle;
+        union
+        {
+            Socket _readFD;
+            Socket _writeFD;
+        };
+        base::Lock       _mutexEvent;
+
+                /* manages UDT protocol */ 
+        class Thread : public base::Thread
+        {
+        public:
+            HANDLE _hEvent;
+            HANDLE  _hEventSynchro;
+            Thread( UDTConnection* connection )
+                : _connection( connection ){}
+            virtual ~Thread(){ _connection = 0; }
+        protected:
+            virtual void run( );
+            virtual bool init( );
+        private:
+            UDTConnection* _connection;
+            timeval tv;
+            UDT::UDSET readfds;
+        };
+        Thread* _thread;
+        
+        uint64_t sizeReceive;
+
+        CHECK_THREAD_DECLARE( _recvThread );
+    };
+}
+}
+
+#endif //EQNET_UDTConnection_H

Property changes on: lib\net\udtConnection.h
___________________________________________________________________
Added: svn:eol-style
   + native

Index: examples/eqPly/channel.cpp
===================================================================
--- examples/eqPly/channel.cpp	(revision 4541)
+++ examples/eqPly/channel.cpp	(working copy)
@@ -37,6 +37,8 @@
 #include "window.h"
 #include "vertexBufferState.h"
 
+#include <eq/base/clock.h>
+
 // light parameters
 static GLfloat lightPosition[] = {0.0f, 0.0f, 1.0f, 0.0f};
 static GLfloat lightAmbient[]  = {0.1f, 0.1f, 0.1f, 1.0f};
@@ -546,6 +548,8 @@
 
 const Model* Channel::_getModel()
 {
+	eq::base::Clock clock;
+
     Config*     config = static_cast< Config* >( getConfig( ));
     const View* view   = static_cast< const View* >( getView( ));
     const FrameData& frameData = _getFrameData();
@@ -558,6 +562,8 @@
     {
         _model = config->getModel( id );
         _modelID = id;
+		EQINFO << "Time to get Model : " << clock.getTimef() 
+			<< " ms" << std::endl;
     }
 
     return _model;
Index: lib/net/connection.cpp
===================================================================
--- lib/net/connection.cpp	(revision 4541)
+++ lib/net/connection.cpp	(working copy)
@@ -25,6 +25,7 @@
 #include "pipeConnection.h"
 #include "socketConnection.h"
 #include "rspConnection.h"
+#include "udtConnection.h"
 
 #ifdef WIN32
 #  include "namedPipeConnection.h"
@@ -78,7 +79,9 @@
         case CONNECTIONTYPE_SDP:
             connection = new SocketConnection( description->type );
             break;
-
+        case CONNECTIONTYPE_UDT:
+            connection = new UDTConnection( );
+            break;
         case CONNECTIONTYPE_PIPE:
             connection = new PipeConnection;
             break;
Index: lib/net/connectionDescription.cpp
===================================================================
--- lib/net/connectionDescription.cpp	(revision 4541)
+++ lib/net/connectionDescription.cpp	(working copy)
@@ -51,6 +51,8 @@
         return CONNECTIONTYPE_TCPIP;
     if( string == "TCP" )
         return CONNECTIONTYPE_TCPIP;
+    if( string == "UDT" )
+        return CONNECTIONTYPE_UDT;
     if( string == "SDP" )
         return CONNECTIONTYPE_SDP;
     if( string == "ANON_PIPE" )
@@ -241,6 +243,7 @@
     os << "type          " 
        << ( desc.type == net::CONNECTIONTYPE_TCPIP ? "TCPIP" : 
             desc.type == net::CONNECTIONTYPE_SDP   ? "SDP" : 
+            desc.type == net::CONNECTIONTYPE_UDT   ? "UDT" : 
             desc.type == net::CONNECTIONTYPE_PIPE  ? "ANON_PIPE" :
             desc.type == net::CONNECTIONTYPE_NAMEDPIPE ? "PIPE" :
             desc.type == net::CONNECTIONTYPE_IB    ? "IB" :
Index: lib/net/connectionType.h
===================================================================
--- lib/net/connectionType.h	(revision 4541)
+++ lib/net/connectionType.h	(working copy)
@@ -31,6 +31,7 @@
         CONNECTIONTYPE_NONE = 0,
         CONNECTIONTYPE_TCPIP,     //!< TCP/IP sockets
         CONNECTIONTYPE_SDP,       //!< SDP sockets (InfiniBand)
+        CONNECTIONTYPE_UDT,
         CONNECTIONTYPE_PIPE,      //!< pipe() based uni-directional connection
         CONNECTIONTYPE_NAMEDPIPE, //!< Named pipe based bidirectional connection
         CONNECTIONTYPE_IB,        //!< Infiniband based RDMA
@@ -49,7 +50,9 @@
             case CONNECTIONTYPE_TCPIP:
                 os << "TCPIP";
                 break;
-
+            case CONNECTIONTYPE_UDT:
+                os << "UDT";
+                break;
             case CONNECTIONTYPE_SDP:
                 os << "SDP";
                 break;
Index: server/loader.l
===================================================================
--- server/loader.l	(revision 4541)
+++ server/loader.l	(working copy)
@@ -183,6 +183,7 @@
 MCIP                            { return EQTOKEN_MCIP; }
 PGM                             { return EQTOKEN_PGM; }
 RSP                             { return EQTOKEN_RSP; }
+UDT                             { return EQTOKEN_UDT; }
 texture                         { return EQTOKEN_TEXTURE; } 
 memory                          { return EQTOKEN_MEMORY; }
 fixed                           { return EQTOKEN_FIXED; }
Index: server/loader.y
===================================================================
--- server/loader.y	(revision 4541)
+++ server/loader.y	(working copy)
@@ -185,6 +185,7 @@
 %token EQTOKEN_TYPE
 %token EQTOKEN_TCPIP
 %token EQTOKEN_SDP
+%token EQTOKEN_UDT
 %token EQTOKEN_IB
 %token EQTOKEN_MCIP
 %token EQTOKEN_PGM
@@ -480,6 +481,7 @@
 connectionType: 
     EQTOKEN_TCPIP  { $$ = eq::net::CONNECTIONTYPE_TCPIP; }
     | EQTOKEN_SDP  { $$ = eq::net::CONNECTIONTYPE_SDP; }
+    | EQTOKEN_UDT  { $$ = eq::net::CONNECTIONTYPE_UDT; }
     | EQTOKEN_IB   { $$ = eq::net::CONNECTIONTYPE_IB; }
     | EQTOKEN_PIPE { $$ = eq::net::CONNECTIONTYPE_NAMEDPIPE; }
     | EQTOKEN_MCIP { $$ = eq::net::CONNECTIONTYPE_MCIP; }
Index: tests/net/connection.cpp
===================================================================
--- tests/net/connection.cpp	(revision 4541)
+++ tests/net/connection.cpp	(working copy)
@@ -30,6 +30,7 @@
 static eq::net::ConnectionType types[] =
 {
     eq::net::CONNECTIONTYPE_TCPIP,
+//	eq::net::CONNECTIONTYPE_UDT,
     eq::net::CONNECTIONTYPE_PIPE,
 #ifdef EQ_USE_BOOST
     eq::net::CONNECTIONTYPE_RSP,
Index: VS2005/Equalizer.vcproj
===================================================================
--- VS2005/Equalizer.vcproj	(revision 4541)
+++ VS2005/Equalizer.vcproj	(working copy)
@@ -2838,6 +2838,10 @@
 				</FileConfiguration>
 			</File>
 			<File
+				RelativePath="..\lib\net\cc.h"
+				>
+			</File>
+			<File
 				RelativePath="..\lib\net\command.cpp"
 				>
 			</File>
@@ -4378,6 +4382,14 @@
 				>
 			</File>
 			<File
+				RelativePath="..\lib\net\udtConnection.cpp"
+				>
+			</File>
+			<File
+				RelativePath="..\lib\net\udtConnection.h"
+				>
+			</File>
+			<File
 				RelativePath="..\lib\net\unbufferedMasterCM.cpp"
 				>
 			</File>
@@ -10934,6 +10946,974 @@
 					/>
 				</FileConfiguration>
 			</File>
+			<Filter
+				Name="udt"
+				>
+				<File
+					RelativePath="..\Windows\udt\api.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\buffer.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\cache.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\ccc.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\channel.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\common.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\core.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\list.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\md5.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\packet.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\queue.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\udt.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<File
+					RelativePath="..\Windows\udt\window.h"
+					>
+					<FileConfiguration
+						Name="Debug|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Debug|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|Win32"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+					<FileConfiguration
+						Name="Release|x64"
+						>
+						<Tool
+							Name="VCCustomBuildTool"
+							Description="Copying UDT : $(InputFileName)"
+							CommandLine="If not EXIST &quot;$(TargetDir)Headers/udt&quot;  mkdir &quot;$(TargetDir)Headers/udt&quot;&#x0D;&#x0A;copy &quot;$(InputPath)&quot; &quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;&#x0D;&#x0A;"
+							Outputs="&quot;$(TargetDir)Headers/udt/$(InputFileName)&quot;"
+						/>
+					</FileConfiguration>
+				</File>
+				<Filter
+					Name="release32"
+					>
+					<File
+						RelativePath="..\Windows\udt\release32\udt.dll"
+						>
+						<FileConfiguration
+							Name="Debug|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Debug|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description=""
+								CommandLine=""
+								Outputs=""
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|Win32"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+					</File>
+					<File
+						RelativePath="..\Windows\udt\release32\udt.lib"
+						>
+						<FileConfiguration
+							Name="Debug|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Debug|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description=""
+								CommandLine=""
+								Outputs=""
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|Win32"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+					</File>
+				</Filter>
+				<Filter
+					Name="debug64"
+					>
+					<File
+						RelativePath="..\Windows\udt\debug64\udt.dll"
+						>
+						<FileConfiguration
+							Name="Debug|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Debug|x64"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+					</File>
+					<File
+						RelativePath="..\Windows\udt\debug64\udt.lib"
+						>
+						<FileConfiguration
+							Name="Debug|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Debug|x64"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+					</File>
+				</Filter>
+				<Filter
+					Name="release64"
+					>
+					<File
+						RelativePath="..\Windows\udt\release64\udt.dll"
+						>
+						<FileConfiguration
+							Name="Debug|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Debug|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description=""
+								CommandLine=""
+								Outputs=""
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|x64"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+					</File>
+					<File
+						RelativePath="..\Windows\udt\release64\udt.lib"
+						>
+						<FileConfiguration
+							Name="Debug|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Debug|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description=""
+								CommandLine=""
+								Outputs=""
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|x64"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+					</File>
+				</Filter>
+				<Filter
+					Name="debug32"
+					>
+					<File
+						RelativePath="..\Windows\udt\debug32\udt.dll"
+						>
+						<FileConfiguration
+							Name="Debug|Win32"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Debug|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description=""
+								CommandLine=""
+								Outputs=""
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+					</File>
+					<File
+						RelativePath="..\Windows\udt\debug32\udt.lib"
+						>
+						<FileConfiguration
+							Name="Debug|Win32"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Debug|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description=""
+								CommandLine=""
+								Outputs=""
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|Win32"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+						<FileConfiguration
+							Name="Release|x64"
+							ExcludedFromBuild="true"
+							>
+							<Tool
+								Name="VCCustomBuildTool"
+								Description="Copying Library : $(InputFileName)"
+								CommandLine="copy &quot;$(InputPath)&quot; &quot;$(TargetDir)$(InputFileName)&quot;&#x0D;&#x0A;"
+								Outputs="&quot;$(TargetDir)$(InputFileName)&quot;"
+							/>
+						</FileConfiguration>
+					</File>
+				</Filter>
+			</Filter>
 		</Filter>
 		<File
 			RelativePath="..\lib\admin.h"
